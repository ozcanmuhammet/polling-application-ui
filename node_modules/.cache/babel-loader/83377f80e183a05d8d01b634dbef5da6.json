{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\OZCAN\\\\Desktop\\\\Workspaces\\\\polling-application-ui\\\\src\\\\pages\\\\Poll.js\";\nimport React, { useState, useEffect } from 'react';\nimport { Container, Header } from 'semantic-ui-react';\nimport pollingApi from '../apis/pollingApi';\nimport { HTTP_OK } from '../util/Constants';\nimport Question from '../components/Question';\n\nconst Poll = props => {\n  const [pollQuestions, setPollQuestions] = useState([]);\n  const [pollAnswers, setPollAnswers] = useState([]);\n  useEffect(() => {\n    fetchPollQuestions();\n  }, []);\n\n  const initializeAnswerMap = () => {\n    let answerMap = new Map();\n  };\n\n  const fetchPollQuestions = async () => {\n    const response = await pollingApi.get(`/questions/${props.match.params.id}`);\n\n    if (response.status === HTTP_OK) {\n      setPollQuestions(response.data);\n    }\n  };\n\n  const renderQuestionList = () => {\n    return pollQuestions.map((question, index) => {\n      return /*#__PURE__*/React.createElement(Question, {\n        question: question,\n        index: index,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 29,\n          columnNumber: 20\n        }\n      });\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(Container, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Header, {\n    as: \"h3\",\n    textAlign: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 13\n    }\n  }, props.location.name), renderQuestionList());\n};\n\nexport default Poll;","map":{"version":3,"sources":["C:/Users/OZCAN/Desktop/Workspaces/polling-application-ui/src/pages/Poll.js"],"names":["React","useState","useEffect","Container","Header","pollingApi","HTTP_OK","Question","Poll","props","pollQuestions","setPollQuestions","pollAnswers","setPollAnswers","fetchPollQuestions","initializeAnswerMap","answerMap","Map","response","get","match","params","id","status","data","renderQuestionList","map","question","index","location","name"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,SAAT,EAAoBC,MAApB,QAAkC,mBAAlC;AACA,OAAOC,UAAP,MAAuB,oBAAvB;AACA,SAASC,OAAT,QAAwB,mBAAxB;AACA,OAAOC,QAAP,MAAqB,wBAArB;;AAEA,MAAMC,IAAI,GAAIC,KAAD,IAAW;AACpB,QAAM,CAACC,aAAD,EAAgBC,gBAAhB,IAAoCV,QAAQ,CAAC,EAAD,CAAlD;AACA,QAAM,CAACW,WAAD,EAAcC,cAAd,IAAgCZ,QAAQ,CAAC,EAAD,CAA9C;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACZY,IAAAA,kBAAkB;AAErB,GAHQ,EAGN,EAHM,CAAT;;AAKA,QAAMC,mBAAmB,GAAG,MAAM;AAC9B,QAAIC,SAAS,GAAG,IAAIC,GAAJ,EAAhB;AACH,GAFD;;AAIA,QAAMH,kBAAkB,GAAG,YAAY;AACnC,UAAMI,QAAQ,GAAG,MAAMb,UAAU,CAACc,GAAX,CAAgB,cAAaV,KAAK,CAACW,KAAN,CAAYC,MAAZ,CAAmBC,EAAG,EAAnD,CAAvB;;AACA,QAAIJ,QAAQ,CAACK,MAAT,KAAoBjB,OAAxB,EAAiC;AAC7BK,MAAAA,gBAAgB,CAACO,QAAQ,CAACM,IAAV,CAAhB;AACH;AACJ,GALD;;AAOA,QAAMC,kBAAkB,GAAG,MAAM;AAC7B,WAAOf,aAAa,CAACgB,GAAd,CAAkB,CAACC,QAAD,EAAWC,KAAX,KAAqB;AAC1C,0BAAO,oBAAC,QAAD;AAAU,QAAA,QAAQ,EAAED,QAApB;AAA8B,QAAA,KAAK,EAAEC,KAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAP;AACH,KAFM,CAAP;AAGH,GAJD;;AAMA,sBACI,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,MAAD;AAAQ,IAAA,EAAE,EAAC,IAAX;AAAgB,IAAA,SAAS,EAAC,QAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKnB,KAAK,CAACoB,QAAN,CAAeC,IADpB,CADJ,EAIKL,kBAAkB,EAJvB,CADJ;AAQH,CAlCD;;AAmCA,eAAejB,IAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { Container, Header } from 'semantic-ui-react';\r\nimport pollingApi from '../apis/pollingApi';\r\nimport { HTTP_OK } from '../util/Constants';\r\nimport Question from '../components/Question';\r\n\r\nconst Poll = (props) => {\r\n    const [pollQuestions, setPollQuestions] = useState([]);\r\n    const [pollAnswers, setPollAnswers] = useState([]);\r\n\r\n    useEffect(() => {\r\n        fetchPollQuestions();\r\n\r\n    }, [])\r\n\r\n    const initializeAnswerMap = () => {\r\n        let answerMap = new Map();\r\n    }\r\n\r\n    const fetchPollQuestions = async () => {\r\n        const response = await pollingApi.get(`/questions/${props.match.params.id}`);\r\n        if (response.status === HTTP_OK) {\r\n            setPollQuestions(response.data);\r\n        }\r\n    }\r\n\r\n    const renderQuestionList = () => {\r\n        return pollQuestions.map((question, index) => {\r\n            return <Question question={question} index={index} />\r\n        });\r\n    }\r\n\r\n    return (\r\n        <Container>\r\n            <Header as='h3' textAlign='center'>\r\n                {props.location.name}\r\n            </Header>\r\n            {renderQuestionList()}\r\n        </Container>\r\n    );\r\n}\r\nexport default Poll;"]},"metadata":{},"sourceType":"module"}