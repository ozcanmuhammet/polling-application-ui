{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\OZCAN\\\\Desktop\\\\Workspaces\\\\polling-application-ui\\\\src\\\\components\\\\AddQuestion.js\";\nimport React, { useState, useEffect } from 'react';\nimport { Modal, Input, Button, Header, Icon } from 'semantic-ui-react';\nimport pollingApi from '../apis/pollingApi';\nimport { checkLogin, getUserId } from '../util/CookieUtil';\nimport { HTTP_OK } from '../util/Constants';\nimport PollHeader from '../components/PollHeader';\n\nconst AddQuestion = props => {\n  const [optionList, setOptionList] = useState([]);\n  const [optionText, setOptionText] = useState(\"\");\n  const [questionText, setQuestionText] = useState(\"\");\n  const [open, setOpen] = React.useState(false);\n  const pollId = props.pollId;\n  useEffect(() => {\n    checkLogin();\n  }, []);\n\n  const addQuestion = () => {\n    if (optionText) {\n      let tempOptionList = optionList;\n      tempOptionList.push(optionText);\n      setOptionList(tempOptionList);\n      setOptionText(\"\");\n    }\n  };\n\n  const renderQuestionList = () => {\n    if (optionList) {\n      return optionList.map((optionText, index) => {\n        return /*#__PURE__*/React.createElement(\"div\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 32,\n            columnNumber: 25\n          }\n        }, /*#__PURE__*/React.createElement(\"strong\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 32,\n            columnNumber: 30\n          }\n        }, `${index + 1}) `), optionText, /*#__PURE__*/React.createElement(\"br\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 32,\n            columnNumber: 77\n          }\n        }));\n      });\n    }\n  };\n\n  const closeModalEvent = () => {\n    setOpen(false);\n    setOptionList([]);\n    setOptionText(\"\");\n  };\n\n  const submitModalEvent = async () => {\n    if (questionText !== null && optionList.length > 0) {\n      let body = {\n        userId: getUserId(),\n        pollId: pollId,\n        questionText: questionText,\n        optionList: optionList\n      };\n      const response = await pollingApi.post(`/questions`, body);\n\n      if (response.status === HTTP_OK) {\n        //TODO\n        //SUCCESS MESSAGE\n        setOpen(false);\n      }\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(Modal, {\n    onClose: () => setOpen(false),\n    onOpen: () => setOpen(true),\n    open: open,\n    trigger: /*#__PURE__*/React.createElement(Button, {\n      circular: true,\n      style: {\n        float: 'right'\n      },\n      icon: \"plus circle\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 22\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Modal.Header, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 13\n    }\n  }, \"Soru Ekle\"), /*#__PURE__*/React.createElement(Modal.Content, {\n    image: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Modal.Description, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Input, {\n    fluid: true,\n    placeholder: \"Soru ekle\",\n    value: questionText,\n    onChange: e => {\n      setQuestionText(e.target.value);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(Header, {\n    as: \"h4\",\n    textAlign: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 21\n    }\n  }, \"Se\\xE7enekler\"), renderQuestionList(), /*#__PURE__*/React.createElement(Input, {\n    fluid: true,\n    value: optionText,\n    icon: /*#__PURE__*/React.createElement(Icon, {\n      name: \"plus circle\",\n      onClick: addQuestion,\n      inverted: true,\n      circular: true,\n      link: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 31\n      }\n    }),\n    placeholder: \"Se\\xE7enek ekle\",\n    onChange: e => {\n      setOptionText(e.target.value);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 21\n    }\n  }))), /*#__PURE__*/React.createElement(Modal.Actions, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    color: \"black\",\n    onClick: closeModalEvent,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 17\n    }\n  }, \"Vazge\\xE7\"), /*#__PURE__*/React.createElement(Button, {\n    content: \"Ekle\",\n    labelPosition: \"right\",\n    icon: \"checkmark\",\n    onClick: submitModalEvent,\n    positive: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 17\n    }\n  })));\n};\n\nexport default AddQuestion;","map":{"version":3,"sources":["C:/Users/OZCAN/Desktop/Workspaces/polling-application-ui/src/components/AddQuestion.js"],"names":["React","useState","useEffect","Modal","Input","Button","Header","Icon","pollingApi","checkLogin","getUserId","HTTP_OK","PollHeader","AddQuestion","props","optionList","setOptionList","optionText","setOptionText","questionText","setQuestionText","open","setOpen","pollId","addQuestion","tempOptionList","push","renderQuestionList","map","index","closeModalEvent","submitModalEvent","length","body","userId","response","post","status","float","e","target","value"],"mappings":"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","sourcesContent":["\r\nimport React, { useState, useEffect } from 'react'\r\nimport { Modal, Input, Button, Header, Icon } from 'semantic-ui-react'\r\nimport pollingApi from '../apis/pollingApi';\r\nimport { checkLogin, getUserId } from '../util/CookieUtil';\r\nimport { HTTP_OK } from '../util/Constants';\r\nimport PollHeader from '../components/PollHeader';\r\n\r\nconst AddQuestion = (props) => {\r\n    const [optionList, setOptionList] = useState([]);\r\n    const [optionText, setOptionText] = useState(\"\");\r\n    const [questionText, setQuestionText] = useState(\"\");\r\n    const [open, setOpen] = React.useState(false);\r\n    const pollId = props.pollId;\r\n\r\n    useEffect(() => {\r\n        checkLogin();\r\n    }, []);\r\n\r\n    const addQuestion = () => {\r\n        if (optionText) {\r\n            let tempOptionList = optionList;\r\n            tempOptionList.push(optionText);\r\n            setOptionList(tempOptionList);\r\n            setOptionText(\"\");\r\n        }\r\n    }\r\n\r\n    const renderQuestionList = () => {\r\n        if (optionList) {\r\n            return optionList.map((optionText, index) => {\r\n                return (<div><strong>{`${index + 1}) `}</strong>{optionText}<br /></div>);\r\n            });\r\n        }\r\n    }\r\n\r\n    const closeModalEvent = () => {\r\n        setOpen(false);\r\n        setOptionList([]);\r\n        setOptionText(\"\");\r\n    }\r\n\r\n    const submitModalEvent = async () => {\r\n        if (questionText !== null && optionList.length > 0) {\r\n            let body = {\r\n                userId: getUserId(),\r\n                pollId: pollId,\r\n                questionText: questionText,\r\n                optionList: optionList\r\n            }\r\n            const response = await pollingApi.post(`/questions`, body);\r\n            if (response.status === HTTP_OK) {\r\n                //TODO\r\n                //SUCCESS MESSAGE\r\n                setOpen(false);\r\n            }\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Modal\r\n            onClose={() => setOpen(false)}\r\n            onOpen={() => setOpen(true)}\r\n            open={open}\r\n            trigger={<Button circular style={{ float: 'right' }} icon='plus circle' />}\r\n        >\r\n            <Modal.Header>Soru Ekle</Modal.Header>\r\n            <Modal.Content image>\r\n                <Modal.Description>\r\n                    <Input fluid placeholder='Soru ekle' value={questionText} onChange={(e) => { setQuestionText(e.target.value) }} />\r\n                    <Header as='h4' textAlign='center'>\r\n                        Seçenekler\r\n                    </Header>\r\n                    {renderQuestionList()}\r\n                    <Input\r\n                        fluid\r\n                        value={optionText}\r\n                        icon={<Icon name='plus circle' onClick={addQuestion} inverted circular link />}\r\n                        placeholder='Seçenek ekle'\r\n                        onChange={(e) => { setOptionText(e.target.value) }}\r\n                    />\r\n\r\n                </Modal.Description>\r\n            </Modal.Content>\r\n            <Modal.Actions>\r\n                <Button color='black' onClick={closeModalEvent}>\r\n                    Vazgeç\r\n          </Button>\r\n                <Button\r\n                    content=\"Ekle\"\r\n                    labelPosition='right'\r\n                    icon='checkmark'\r\n                    onClick={submitModalEvent}\r\n                    positive\r\n                />\r\n            </Modal.Actions>\r\n        </Modal>\r\n    );\r\n}\r\n\r\nexport default AddQuestion;"]},"metadata":{},"sourceType":"module"}