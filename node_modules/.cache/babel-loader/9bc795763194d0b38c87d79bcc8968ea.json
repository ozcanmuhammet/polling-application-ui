{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\OZCAN\\\\Desktop\\\\Workspaces\\\\polling-application-ui\\\\src\\\\pages\\\\Poll.js\";\nimport React, { useState, useEffect } from 'react';\nimport { Container, Header, Button } from 'semantic-ui-react';\nimport pollingApi from '../apis/pollingApi';\nimport { ADMIN_USER, HTTP_OK } from '../util/Constants';\nimport Question from '../components/Question';\nimport PollHeader from '../components/PollHeader';\nimport AddQuestion from '../components/AddQuestion';\nimport history from '../history';\nimport { getAuthorities, getUserId } from '../util/CookieUtil';\n\nconst Poll = props => {\n  const [pollQuestions, setPollQuestions] = useState([]);\n  const [isLoaded, setIsLoaded] = useState(true);\n  const [isAddQuestionOpen, setIsAddQuestionOpen] = useState(false);\n  const [questionCount, setQuestionCount] = useState();\n  const [isDisabled, setIsDisabled] = useState(true);\n  let answerMap = new Map();\n  useEffect(() => {\n    if (props.location.name === undefined || props.location.name === null) {\n      history.push('/');\n    }\n\n    fetchPollQuestions();\n  }, []);\n\n  const checkIsDisabled = () => {\n    return questionCount !== answerMap.length;\n  };\n\n  const setAnswer = (questionId, optionId) => {\n    answerMap.set(questionId, optionId);\n  };\n\n  const updatePoll = async body => {\n    const response = await pollingApi.post(`/questions`, body);\n\n    if (response) {\n      if (getAuthorities() === ADMIN_USER) {\n        setIsLoaded(false);\n        let tempPollQuestions = pollQuestions;\n        tempPollQuestions.push(response.data);\n        setPollQuestions(tempPollQuestions);\n        setIsLoaded(true);\n      }\n    }\n  };\n\n  const handleSubmit = async () => {\n    let answerList = [];\n    answerMap.forEach((optionId, questionId) => {\n      answerList.push({\n        questionId: questionId,\n        optionId: optionId\n      });\n    });\n\n    if (questionCount === answerList.length) {\n      let body = {\n        answerList: answerList,\n        userId: getUserId()\n      };\n      const response = await pollingApi.post(`/answers`, body);\n\n      if (response.status === HTTP_OK) {\n        //TODO\n        //Success Message\n        history.push('/');\n      }\n    }\n  };\n\n  const fetchPollQuestions = async () => {\n    const response = await pollingApi.get(`/questions/${props.match.params.id}`);\n\n    if (response.status === HTTP_OK) {\n      setPollQuestions(response.data);\n      setQuestionCount(response.data.length);\n    }\n  };\n\n  const renderQuestionList = pollQuestions => {\n    return pollQuestions.map((question, index) => {\n      return /*#__PURE__*/React.createElement(Question, {\n        question: question,\n        index: index,\n        setAnswer: setAnswer,\n        pollId: props.match.params.id,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 21\n        }\n      });\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(PollHeader, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Container, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Header, {\n    as: \"h3\",\n    textAlign: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 17\n    }\n  }, props.location.name), isLoaded ? renderQuestionList(pollQuestions) : null, /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    primary: true,\n    onClick: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 21\n    }\n  }, \"Kaydet\"), /*#__PURE__*/React.createElement(Button, {\n    secondary: true,\n    onClick: () => history.push('/'),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 21\n    }\n  }, \"Vazge\\xE7\")), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      position: 'relative',\n      width: '100%'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(AddQuestion, {\n    pollId: props.match.params.id,\n    updatePoll: updatePoll,\n    onClick: () => {\n      setIsAddQuestionOpen(!isAddQuestionOpen);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 21\n    }\n  }))));\n};\n\nexport default Poll;","map":{"version":3,"sources":["C:/Users/OZCAN/Desktop/Workspaces/polling-application-ui/src/pages/Poll.js"],"names":["React","useState","useEffect","Container","Header","Button","pollingApi","ADMIN_USER","HTTP_OK","Question","PollHeader","AddQuestion","history","getAuthorities","getUserId","Poll","props","pollQuestions","setPollQuestions","isLoaded","setIsLoaded","isAddQuestionOpen","setIsAddQuestionOpen","questionCount","setQuestionCount","isDisabled","setIsDisabled","answerMap","Map","location","name","undefined","push","fetchPollQuestions","checkIsDisabled","length","setAnswer","questionId","optionId","set","updatePoll","body","response","post","tempPollQuestions","data","handleSubmit","answerList","forEach","userId","status","get","match","params","id","renderQuestionList","map","question","index","position","width"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { Container, Header, Button } from 'semantic-ui-react';\r\nimport pollingApi from '../apis/pollingApi';\r\nimport { ADMIN_USER, HTTP_OK } from '../util/Constants';\r\nimport Question from '../components/Question';\r\nimport PollHeader from '../components/PollHeader';\r\nimport AddQuestion from '../components/AddQuestion';\r\nimport history from '../history';\r\nimport { getAuthorities, getUserId } from '../util/CookieUtil'\r\n\r\nconst Poll = (props) => {\r\n    const [pollQuestions, setPollQuestions] = useState([]);\r\n    const [isLoaded, setIsLoaded] = useState(true);\r\n    const [isAddQuestionOpen, setIsAddQuestionOpen] = useState(false);\r\n    const [questionCount, setQuestionCount] = useState();\r\n    const [isDisabled, setIsDisabled] = useState(true);\r\n    let answerMap = new Map();\r\n\r\n    useEffect(() => {\r\n        if (props.location.name === undefined || props.location.name === null) {\r\n            history.push('/');\r\n        }\r\n        fetchPollQuestions();\r\n    }, []);\r\n\r\n    const checkIsDisabled = () => {\r\n        return questionCount !== answerMap.length;\r\n    }\r\n\r\n    const setAnswer = (questionId, optionId) => {\r\n        answerMap.set(questionId, optionId)\r\n    }\r\n\r\n    const updatePoll = async (body) => {\r\n        const response = await pollingApi.post(`/questions`, body);\r\n        if (response) {\r\n            if (getAuthorities() === ADMIN_USER) {\r\n                setIsLoaded(false);\r\n                let tempPollQuestions = pollQuestions;\r\n                tempPollQuestions.push(response.data);\r\n                setPollQuestions(tempPollQuestions);\r\n                setIsLoaded(true);\r\n            }\r\n        }\r\n    }\r\n\r\n    const handleSubmit = async () => {\r\n        let answerList = [];\r\n        answerMap.forEach((optionId, questionId) => {\r\n            answerList.push({ questionId: questionId, optionId: optionId });\r\n        });\r\n        if (questionCount === answerList.length) {\r\n            let body = {\r\n                answerList: answerList,\r\n                userId: getUserId()\r\n            }\r\n            const response = await pollingApi.post(`/answers`, body);\r\n            if (response.status === HTTP_OK) {\r\n                //TODO\r\n                //Success Message\r\n                history.push('/');\r\n            }\r\n        }\r\n    }\r\n\r\n    const fetchPollQuestions = async () => {\r\n        const response = await pollingApi.get(`/questions/${props.match.params.id}`);\r\n        if (response.status === HTTP_OK) {\r\n            setPollQuestions(response.data);\r\n            setQuestionCount(response.data.length);\r\n        }\r\n    }\r\n\r\n    const renderQuestionList = (pollQuestions) => {\r\n        return pollQuestions.map((question, index) => {\r\n            return (<Question question={question} index={index} setAnswer={setAnswer} pollId={props.match.params.id} />);\r\n        });\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <PollHeader />\r\n            <Container>\r\n                <Header as='h3' textAlign='center'>\r\n                    {props.location.name}\r\n                </Header>\r\n                {isLoaded ? renderQuestionList(pollQuestions) : null}\r\n                <br />\r\n                <div>\r\n                    <Button primary onClick={handleSubmit}>Kaydet</Button>\r\n                    <Button secondary onClick={() => history.push('/')}>Vazgeç</Button>\r\n                </div>\r\n                <br />\r\n                <div style={{ position: 'relative', width: '100%' }}>\r\n                    <AddQuestion pollId={props.match.params.id} updatePoll={updatePoll} onClick={() => { setIsAddQuestionOpen(!isAddQuestionOpen) }} />\r\n                </div>\r\n            </Container>\r\n        </div>\r\n\r\n    );\r\n}\r\nexport default Poll;"]},"metadata":{},"sourceType":"module"}