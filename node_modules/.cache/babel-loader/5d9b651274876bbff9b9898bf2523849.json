{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\OZCAN\\\\Desktop\\\\Workspaces\\\\polling-application-ui\\\\src\\\\pages\\\\Statistics.js\";\nimport React, { useState, useEffect } from 'react';\nimport { List } from 'semantic-ui-react';\nimport pollingApi from '../apis/pollingApi';\nimport PollHeader from '../components/PollHeader';\nimport Question from '../components/Question';\nimport { HTTP_OK } from '../util/Constants';\n\nconst Statistics = () => {\n  const [pendingQuestionList, setPendingQuestionList] = useState([]);\n  useEffect(() => {\n    fetchPendingQuestionList();\n  }, []);\n\n  const fetchPendingQuestionList = async () => {\n    const response = await pollingApi.get(\"/admin/questions/pending\");\n\n    if (response.status === HTTP_OK) {\n      setPendingQuestionList(response.data);\n    }\n  };\n\n  const renderPendingQuestionItems = () => {\n    return pendingQuestionList.map((question, index) => {\n      return /*#__PURE__*/React.createElement(Question, {\n        question: question,\n        index: index,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 24,\n          columnNumber: 20\n        }\n      });\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(PollHeader, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(List, {\n    divided: true,\n    relaxed: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 13\n    }\n  }, renderPendingQuestionItems()));\n};\n\nexport default Statistics;","map":{"version":3,"sources":["C:/Users/OZCAN/Desktop/Workspaces/polling-application-ui/src/pages/Statistics.js"],"names":["React","useState","useEffect","List","pollingApi","PollHeader","Question","HTTP_OK","Statistics","pendingQuestionList","setPendingQuestionList","fetchPendingQuestionList","response","get","status","data","renderPendingQuestionItems","map","question","index"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,IAAT,QAAqB,mBAArB;AACA,OAAOC,UAAP,MAAuB,oBAAvB;AACA,OAAOC,UAAP,MAAuB,0BAAvB;AACA,OAAOC,QAAP,MAAqB,wBAArB;AACA,SAASC,OAAT,QAAwB,mBAAxB;;AAEA,MAAMC,UAAU,GAAG,MAAM;AACrB,QAAM,CAACC,mBAAD,EAAsBC,sBAAtB,IAAgDT,QAAQ,CAAC,EAAD,CAA9D;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACZS,IAAAA,wBAAwB;AAC3B,GAFQ,EAEN,EAFM,CAAT;;AAIA,QAAMA,wBAAwB,GAAG,YAAY;AACzC,UAAMC,QAAQ,GAAG,MAAMR,UAAU,CAACS,GAAX,CAAe,0BAAf,CAAvB;;AACA,QAAID,QAAQ,CAACE,MAAT,KAAoBP,OAAxB,EAAiC;AAC7BG,MAAAA,sBAAsB,CAACE,QAAQ,CAACG,IAAV,CAAtB;AACH;AACJ,GALD;;AAOA,QAAMC,0BAA0B,GAAG,MAAM;AACrC,WAAOP,mBAAmB,CAACQ,GAApB,CAAwB,CAACC,QAAD,EAAWC,KAAX,KAAqB;AAChD,0BAAO,oBAAC,QAAD;AAAU,QAAA,QAAQ,EAAED,QAApB;AAA8B,QAAA,KAAK,EAAEC,KAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAP;AACH,KAFM,CAAP;AAGH,GAJD;;AAMA,sBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,eAEI,oBAAC,IAAD;AAAM,IAAA,OAAO,MAAb;AAAc,IAAA,OAAO,MAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKH,0BAA0B,EAD/B,CAFJ,CADJ;AAQH,CA5BD;;AA6BA,eAAeR,UAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { List } from 'semantic-ui-react'\r\nimport pollingApi from '../apis/pollingApi';\r\nimport PollHeader from '../components/PollHeader';\r\nimport Question from '../components/Question';\r\nimport { HTTP_OK } from '../util/Constants';\r\n\r\nconst Statistics = () => {\r\n    const [pendingQuestionList, setPendingQuestionList] = useState([]);\r\n\r\n    useEffect(() => {\r\n        fetchPendingQuestionList();\r\n    }, [])\r\n\r\n    const fetchPendingQuestionList = async () => {\r\n        const response = await pollingApi.get(\"/admin/questions/pending\");\r\n        if (response.status === HTTP_OK) {\r\n            setPendingQuestionList(response.data);\r\n        }\r\n    }\r\n\r\n    const renderPendingQuestionItems = () => {\r\n        return pendingQuestionList.map((question, index) => {\r\n            return <Question question={question} index={index} />\r\n        });\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <PollHeader />\r\n            <List divided relaxed>\r\n                {renderPendingQuestionItems()}\r\n            </List>\r\n        </div>\r\n    )\r\n}\r\nexport default Statistics;"]},"metadata":{},"sourceType":"module"}