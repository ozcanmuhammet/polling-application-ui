{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\OZCAN\\\\Desktop\\\\Workspaces\\\\polling-application-ui\\\\src\\\\pages\\\\Poll.js\";\nimport React, { useState, useEffect } from 'react';\nimport { Container } from 'semantic-ui-react';\nimport pollingApi from '../apis/pollingApi';\nimport { HTTP_OK } from '../util/Constants';\n\nconst Poll = props => {\n  const [pollQuestions, setPollQuestions] = useState([]);\n  useEffect(() => {\n    fetchPollQuestions();\n  }, []);\n\n  const fetchPollQuestions = async () => {\n    const response = await pollingApi.get(`/questions/${props.match.params.id}`);\n\n    if (response.status === HTTP_OK) {\n      setPollQuestions(response.data);\n    }\n  };\n\n  const renderQuestionList = () => {\n    return pollQuestions.map(question => {\n      return /*#__PURE__*/React.createElement(Question, {\n        question: question,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 22,\n          columnNumber: 20\n        }\n      });\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(Container, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 9\n    }\n  }, renderQuestionList());\n};\n\nexport default Poll;","map":{"version":3,"sources":["C:/Users/OZCAN/Desktop/Workspaces/polling-application-ui/src/pages/Poll.js"],"names":["React","useState","useEffect","Container","pollingApi","HTTP_OK","Poll","props","pollQuestions","setPollQuestions","fetchPollQuestions","response","get","match","params","id","status","data","renderQuestionList","map","question"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,SAAT,QAA0B,mBAA1B;AACA,OAAOC,UAAP,MAAuB,oBAAvB;AACA,SAASC,OAAT,QAAwB,mBAAxB;;AAEA,MAAMC,IAAI,GAAIC,KAAD,IAAW;AACpB,QAAM,CAACC,aAAD,EAAgBC,gBAAhB,IAAoCR,QAAQ,CAAC,EAAD,CAAlD;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACZQ,IAAAA,kBAAkB;AACrB,GAFQ,EAEN,EAFM,CAAT;;AAIA,QAAMA,kBAAkB,GAAG,YAAY;AACnC,UAAMC,QAAQ,GAAG,MAAMP,UAAU,CAACQ,GAAX,CAAgB,cAAaL,KAAK,CAACM,KAAN,CAAYC,MAAZ,CAAmBC,EAAG,EAAnD,CAAvB;;AACA,QAAIJ,QAAQ,CAACK,MAAT,KAAoBX,OAAxB,EAAiC;AAC7BI,MAAAA,gBAAgB,CAACE,QAAQ,CAACM,IAAV,CAAhB;AACH;AACJ,GALD;;AAOA,QAAMC,kBAAkB,GAAG,MAAM;AAC7B,WAAOV,aAAa,CAACW,GAAd,CAAmBC,QAAD,IAAc;AACnC,0BAAO,oBAAC,QAAD;AAAU,QAAA,QAAQ,EAAEA,QAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAP;AACH,KAFM,CAAP;AAGH,GAJD;;AAMA,sBACI,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKF,kBAAkB,EADvB,CADJ;AAKH,CAzBD;;AA0BA,eAAeZ,IAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { Container } from 'semantic-ui-react';\r\nimport pollingApi from '../apis/pollingApi';\r\nimport { HTTP_OK } from '../util/Constants';\r\n\r\nconst Poll = (props) => {\r\n    const [pollQuestions, setPollQuestions] = useState([]);\r\n\r\n    useEffect(() => {\r\n        fetchPollQuestions();\r\n    }, [])\r\n\r\n    const fetchPollQuestions = async () => {\r\n        const response = await pollingApi.get(`/questions/${props.match.params.id}`);\r\n        if (response.status === HTTP_OK) {\r\n            setPollQuestions(response.data);\r\n        }\r\n    }\r\n\r\n    const renderQuestionList = () => {\r\n        return pollQuestions.map((question) => {\r\n            return <Question question={question} />\r\n        });\r\n    }\r\n\r\n    return (\r\n        <Container>\r\n            {renderQuestionList()}\r\n        </Container>\r\n    );\r\n}\r\nexport default Poll;"]},"metadata":{},"sourceType":"module"}