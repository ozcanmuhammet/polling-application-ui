{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\OZCAN\\\\Desktop\\\\Workspaces\\\\polling-application-ui\\\\src\\\\components\\\\Question.js\";\nimport React, { useState } from 'react';\nimport { Container, Grid, Checkbox, Divider } from 'semantic-ui-react';\nimport EditQuestion from '../components/EditQuestion';\nimport history from '../history';\nimport { getAuthorities } from '../util/CookieUtil';\nimport { ADMIN_USER } from '../util/Constants';\n\nconst Question = props => {\n  const [selectedOption, setSelectedOption] = useState(null);\n  const [questionText, setQuestionText] = useState(props.question.text);\n  const [optionList, setOptionList] = useState(props.question.optionDtoList);\n\n  const renderOptionsList = () => {\n    return optionList.map(option => {\n      return /*#__PURE__*/React.createElement(Answer, {\n        option: option,\n        setOption: answer,\n        selectedOption: selectedOption,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 15,\n          columnNumber: 20\n        }\n      });\n    });\n  };\n\n  const answer = optionNo => {\n    setSelectedOption(optionNo);\n    props.setAnswer(props.question.id, optionNo);\n  };\n\n  const updateQuestion = question => {\n    setOptionList(question.optionList);\n    setQuestionText(question.questionText);\n  };\n\n  return /*#__PURE__*/React.createElement(Container, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    columns: 1,\n    divided: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Grid.Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Grid.Column, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      display: \"inline-block\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(\"strong\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 70\n    }\n  }, `${props.index + 1}) `), /*#__PURE__*/React.createElement(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 111\n    }\n  }, questionText), \" \"), getAuthorities() === ADMIN_USER ? /*#__PURE__*/React.createElement(EditQuestion, {\n    updateQuestion: updateQuestion,\n    questionId: props.question.id,\n    questionText: questionText,\n    optionList: optionList,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 33\n    }\n  }) : null))), /*#__PURE__*/React.createElement(Grid.Row, {\n    style: {\n      marginTop: '-2%'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 17\n    }\n  }, renderOptionsList())), /*#__PURE__*/React.createElement(Divider, {\n    section: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 13\n    }\n  }));\n};\n\nconst Answer = props => {\n  return /*#__PURE__*/React.createElement(Grid.Column, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Checkbox, {\n    label: {\n      children: props.option.optionText\n    },\n    value: props.option.id,\n    checked: props.option.id === props.selectedOption,\n    onClick: () => props.setOption(props.option.id),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 13\n    }\n  }));\n};\n\nexport default Question;","map":{"version":3,"sources":["C:/Users/OZCAN/Desktop/Workspaces/polling-application-ui/src/components/Question.js"],"names":["React","useState","Container","Grid","Checkbox","Divider","EditQuestion","history","getAuthorities","ADMIN_USER","Question","props","selectedOption","setSelectedOption","questionText","setQuestionText","question","text","optionList","setOptionList","optionDtoList","renderOptionsList","map","option","answer","optionNo","setAnswer","id","updateQuestion","display","index","marginTop","Answer","children","optionText","setOption"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\r\nimport { Container, Grid, Checkbox, Divider } from 'semantic-ui-react';\r\nimport EditQuestion from '../components/EditQuestion';\r\nimport history from '../history';\r\nimport { getAuthorities } from '../util/CookieUtil';\r\nimport { ADMIN_USER } from '../util/Constants';\r\n\r\nconst Question = (props) => {\r\n    const [selectedOption, setSelectedOption] = useState(null);\r\n    const [questionText, setQuestionText] = useState(props.question.text);\r\n    const [optionList, setOptionList] = useState(props.question.optionDtoList);\r\n\r\n    const renderOptionsList = () => {\r\n        return optionList.map((option) => {\r\n            return <Answer option={option} setOption={answer} selectedOption={selectedOption} />\r\n        });\r\n    }\r\n\r\n    const answer = (optionNo) => {\r\n        setSelectedOption(optionNo);\r\n        props.setAnswer(props.question.id, optionNo);\r\n    }\r\n\r\n    const updateQuestion = (question) => {\r\n        setOptionList(question.optionList);\r\n        setQuestionText(question.questionText);\r\n    }\r\n\r\n    return (\r\n        <Container>\r\n            <Grid columns={1} divided>\r\n                <Grid.Row>\r\n                    <Grid.Column>\r\n                        <div>\r\n                            <div style={{ display: \"inline-block\" }}><strong>{`${props.index + 1}) `}</strong><label>{questionText}</label> </div>\r\n                            {getAuthorities() === ADMIN_USER ?\r\n                                <EditQuestion updateQuestion={updateQuestion} questionId={props.question.id} questionText={questionText} optionList={optionList} /> : null\r\n                            }\r\n                        </div>\r\n                    </Grid.Column>\r\n                </Grid.Row>\r\n\r\n                <Grid.Row style={{ marginTop: '-2%' }}>\r\n                    {renderOptionsList()}\r\n                </Grid.Row>\r\n            </Grid>\r\n            <Divider section />\r\n        </Container>\r\n    )\r\n}\r\n\r\nconst Answer = (props) => {\r\n    return (\r\n        <Grid.Column>\r\n            <Checkbox label={{ children: props.option.optionText }} value={props.option.id} checked={props.option.id === props.selectedOption} onClick={() => props.setOption(props.option.id)} />\r\n        </Grid.Column>\r\n    )\r\n}\r\n\r\n\r\nexport default Question;"]},"metadata":{},"sourceType":"module"}