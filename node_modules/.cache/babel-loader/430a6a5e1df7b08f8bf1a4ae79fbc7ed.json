{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\OZCAN\\\\Desktop\\\\Workspaces\\\\polling-application-ui\\\\src\\\\pages\\\\Poll.js\";\nimport React, { useState, useEffect } from 'react';\nimport { Container, Header, Button } from 'semantic-ui-react';\nimport pollingApi from '../apis/pollingApi';\nimport { HTTP_OK } from '../util/Constants';\nimport Question from '../components/Question';\nimport PollHeader from '../components/PollHeader';\nimport AddQuestion from '../components/AddQuestion';\nimport history from '../history';\nimport { getUserId } from '../util/CookieUtil';\n\nconst Poll = props => {\n  const [pollQuestions, setPollQuestions] = useState([]);\n  const [isAddQuestionOpen, setIsAddQuestionOpen] = useState(false);\n  let answerMap = new Map();\n  useEffect(() => {\n    if (props.location.name === undefined || props.location.name === null) {\n      history.push('/');\n    }\n\n    fetchPollQuestions();\n  }, []);\n\n  const setAnswer = (questionId, optionId) => {\n    answerMap.set(questionId, optionId);\n  };\n\n  const handleSubmit = async () => {\n    let answerList = [];\n    answerMap.forEach((optionId, questionId) => {\n      answerList.push({\n        questionId: questionId,\n        optionId: optionId\n      });\n    });\n    let body = {\n      answerList: answerList,\n      userId: getUserId()\n    };\n    const response = await pollingApi.post(`/answers`, body);\n\n    if (response.status === HTTP_OK) {//TODO\n      //Success Message\n    }\n  };\n\n  const fetchPollQuestions = async () => {\n    const response = await pollingApi.get(`/questions/${props.match.params.id}`);\n\n    if (response.status === HTTP_OK) {\n      setPollQuestions(response.data);\n    }\n  };\n\n  const renderQuestionList = () => {\n    return pollQuestions.map((question, index) => {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(Question, {\n        question: question,\n        index: index,\n        setAnswer: setAnswer,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 17\n        }\n      }));\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(PollHeader, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Container, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Header, {\n    as: \"h3\",\n    textAlign: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 17\n    }\n  }, props.location.name), renderQuestionList(), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    primary: true,\n    onClick: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 21\n    }\n  }, \"Kaydet\"), /*#__PURE__*/React.createElement(Button, {\n    secondary: true,\n    onClick: () => history.push('/'),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 21\n    }\n  }, \"Vazge\\xE7\")), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(AddQuestion, {\n    pollId: props.match.params.id,\n    onClick: () => {\n      setIsAddQuestionOpen(!isAddQuestionOpen);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 17\n    }\n  })));\n};\n\nexport default Poll;","map":{"version":3,"sources":["C:/Users/OZCAN/Desktop/Workspaces/polling-application-ui/src/pages/Poll.js"],"names":["React","useState","useEffect","Container","Header","Button","pollingApi","HTTP_OK","Question","PollHeader","AddQuestion","history","getUserId","Poll","props","pollQuestions","setPollQuestions","isAddQuestionOpen","setIsAddQuestionOpen","answerMap","Map","location","name","undefined","push","fetchPollQuestions","setAnswer","questionId","optionId","set","handleSubmit","answerList","forEach","body","userId","response","post","status","get","match","params","id","data","renderQuestionList","map","question","index"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { Container, Header, Button } from 'semantic-ui-react';\r\nimport pollingApi from '../apis/pollingApi';\r\nimport { HTTP_OK } from '../util/Constants';\r\nimport Question from '../components/Question';\r\nimport PollHeader from '../components/PollHeader';\r\nimport AddQuestion from '../components/AddQuestion';\r\nimport history from '../history';\r\nimport { getUserId } from '../util/CookieUtil'\r\n\r\nconst Poll = (props) => {\r\n    const [pollQuestions, setPollQuestions] = useState([]);\r\n    const [isAddQuestionOpen, setIsAddQuestionOpen] = useState(false);\r\n    let answerMap = new Map();\r\n\r\n    useEffect(() => {\r\n        if (props.location.name === undefined || props.location.name === null) {\r\n            history.push('/');\r\n        }\r\n        fetchPollQuestions();\r\n    }, [])\r\n\r\n    const setAnswer = (questionId, optionId) => {\r\n        answerMap.set(questionId, optionId)\r\n    }\r\n\r\n    const handleSubmit = async () => {\r\n        let answerList = [];\r\n        answerMap.forEach((optionId, questionId) => {\r\n            answerList.push({ questionId: questionId, optionId: optionId });\r\n        });\r\n        let body = {\r\n            answerList: answerList,\r\n            userId: getUserId()\r\n        }\r\n        const response = await pollingApi.post(`/answers`, body);\r\n        if (response.status === HTTP_OK) {\r\n            //TODO\r\n            //Success Message\r\n        }\r\n    }\r\n\r\n    const fetchPollQuestions = async () => {\r\n        const response = await pollingApi.get(`/questions/${props.match.params.id}`);\r\n        if (response.status === HTTP_OK) {\r\n            setPollQuestions(response.data);\r\n        }\r\n    }\r\n\r\n    const renderQuestionList = () => {\r\n        return pollQuestions.map((question, index) => {\r\n            return (<div>\r\n                <Question question={question} index={index} setAnswer={setAnswer} />\r\n            </div>);\r\n        });\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <PollHeader />\r\n            <Container>\r\n                <Header as='h3' textAlign='center'>\r\n                    {props.location.name}\r\n                </Header>\r\n                {renderQuestionList()}\r\n                <br />\r\n                <div>\r\n                    <Button primary onClick={handleSubmit}>Kaydet</Button>\r\n                    <Button secondary onClick={() => history.push('/')}>Vazgeç</Button>\r\n                </div>\r\n                <br />\r\n                <AddQuestion pollId={props.match.params.id} onClick={() => { setIsAddQuestionOpen(!isAddQuestionOpen) }} />\r\n            </Container>\r\n        </div>\r\n\r\n    );\r\n}\r\nexport default Poll;"]},"metadata":{},"sourceType":"module"}